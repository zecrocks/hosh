services:
  nats:
    image: nats:alpine
    ports:
      - "4222:4222"
      - "8222:8222"
    command: ["--http_port", "8222"]
    environment:
      - NATS_SERVER_NAME=hosh-nats
      - NATS_CLUSTER_NAME=hosh-cluster
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      start_period: 2s
      interval: 5s
      timeout: 3s
      retries: 5

  checker-btc:
    build: ./checkers/btc
    image: hosh/checker-btc
    environment:
      RUST_LOG: info
      RUN_MODE: worker
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NATS_URL: "nats://nats:4222"
      NATS_SUBJECT: "hosh.check.btc"
      TOR_PROXY_HOST: tor
      TOR_PROXY_PORT: 9050
      CLICKHOUSE_HOST: chronicler
      CLICKHOUSE_PORT: 9000
      CLICKHOUSE_DB: hosh
      CLICKHOUSE_USER: hosh
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-chroniclerpass}
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      tor:
        condition: service_healthy
      chronicler:
        condition: service_healthy

  checker-btc-user:
    build: ./checkers/btc
    image: hosh/checker-btc
    environment:
      RUST_LOG: info
      RUN_MODE: worker
      MAX_CONCURRENT_CHECKS: 1
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NATS_URL: "nats://nats:4222"
      NATS_SUBJECT: "hosh.check.btc.user"
      TOR_PROXY_HOST: tor
      TOR_PROXY_PORT: 9050
      CLICKHOUSE_HOST: chronicler
      CLICKHOUSE_PORT: 9000
      CLICKHOUSE_DB: hosh
      CLICKHOUSE_USER: hosh
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-chroniclerpass}
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      tor:
        condition: service_healthy
      chronicler:
        condition: service_healthy

  dashboard:
    build: contrib/dashboard
    image: hosh/dashboard
    container_name: data-dashboard
    ports:
      - "8050:8050"
    profiles:
      - disabled
      - dev
    volumes:
      - ./contrib/dashboard:/app
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis

  discovery:
    build: ./discovery
    image: hosh/discovery
    container_name: discovery
    environment:
      - REDIS_HOST=redis
      - RUST_LOG=info
      - DISCOVERY_INTERVAL=3600
    depends_on:
      redis:
        condition: service_healthy
      # checker-btc: # TODO: Re-enable after implementing peer discovery
      #   condition: service_healthy

  publisher:
    build: 
      context: ./publisher
      dockerfile: Dockerfile
    image: hosh/publisher-rust
    container_name: publisher
    environment:
      - RUST_LOG=info
      - CHECK_INTERVAL=${CHECK_INTERVAL:-300}
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - NATS_PREFIX=${NATS_PREFIX:-hosh.}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      checker-btc:
        condition: service_started
      checker-zec:
        condition: service_started
      checker-http:
        condition: service_started

  checker-zec:
    build: checkers/zec
    image: hosh/checker-zec
    container_name: checker-zec
    environment:
      NATS_HOST: nats
      NATS_PORT: 4222
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy

  checker-http:
    build:
      context: ./checkers/http
      dockerfile: Dockerfile
    image: hosh/checker-http
    environment:
      - REDIS_HOST=redis
      - NATS_HOST=nats
      - TOR_PROXY_HOST=tor
    depends_on:
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy
      tor:
        condition: service_healthy

  checker-http-dev:
    build:
      context: ./checkers/http
      dockerfile: dev.Dockerfile
    image: hosh/checker-http-dev
    environment:
      - REDIS_HOST=redis
      - NATS_HOST=nats
      - TOR_PROXY_HOST=tor
    volumes:
      - ./checkers/http:/usr/src/app
    profiles:
      - dev
    depends_on:
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy
      tor:
        condition: service_healthy

  checker-btc-dev:
    build:
      context: ./checkers/btc
      dockerfile: dev.Dockerfile
    profiles:
      - dev
    volumes:
      - ./checkers/btc:/usr/src/btc
      - cargo-cache:/usr/local/cargo/registry
    environment:
      RUST_LOG: debug
      RUN_MODE: worker
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NATS_URL: "nats://nats:4222"
      NATS_SUBJECT: "hosh.check.btc"
      TOR_PROXY_HOST: tor
      TOR_PROXY_PORT: 9050
      CLICKHOUSE_HOST: chronicler
      CLICKHOUSE_PORT: 9000
      CLICKHOUSE_DB: hosh
      CLICKHOUSE_USER: hosh
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-chroniclerpass}
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      tor:
        condition: service_healthy
      chronicler:
        condition: service_healthy

  redis:
    image: redis:alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    # Uncomment for local development, or use "docker compose exec -ti redis redis-cli"
    # ports:
    #   - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: always

  tor:
    image: osminogin/tor-simple
    container_name: tor
    healthcheck:
      test: |
        CMD-SHELL
        curl --fail --socks5-hostname localhost:9050 -s https://check.torproject.org/ | grep -qm1 Congratulations
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - TOR_NewCircuitPeriod=300
      - TOR_MaxCircuitDirtiness=600
    ports:
      - "9050:9050"
    restart: on-failure:5
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 120s

  web:
    build: web
    image: hosh/web
    container_name: web
    ports:
      - "8080:8080"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 5s
      timeout: 3s
      retries: 5

  architecture:
    image: terrastruct/d2:v0.1.2
    profiles:
      - disabled
      - dev
    environment:
      - D2_LAYOUT=dagre
    volumes:
      - ./docs/src:/home/debian/src
    ports:
      - "8000:8080"
    command: ["--watch", "/home/debian/src/architecture.d2"]

  docs:
    image: peaceiris/mdbook:latest
    profiles:
      - dev
    ports:
      - "3000:3000"
      - "3001:3001"
    volumes:
      - .:/hosh
    command: ["serve", "--hostname", "0.0.0.0", "--port", "3000"]
    working_dir: /hosh/docs

  chronicler:
    build: ./chronicler
    container_name: chronicler
    environment:
      - CLICKHOUSE_DB=hosh
      - CLICKHOUSE_USER=hosh
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD:-chroniclerpass}
    ports:
      - "8123:8123"   # HTTP interface
      - "9000:9000"   # Native ClickHouse protocol
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

volumes:
  cargo-cache:
  btc-data:
  redis-data:
  clickhouse-data:
