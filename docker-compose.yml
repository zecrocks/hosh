services:
  nats:
    image: nats:alpine
    ports:
      - "4222:4222"
      - "8222:8222"
    command: ["--http_port", "8222"]
    environment:
      - NATS_SERVER_NAME=hosh-nats
      - NATS_CLUSTER_NAME=hosh-cluster
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      start_period: 2s
      interval: 5s
      timeout: 3s
      retries: 5

  # Rust BTC Backend API Server
  btc-backend:
    build: ./checkers/btc
    image: hosh/btc-backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/healthz"]
      interval: 5s
      timeout: 3s
      retries: 5
    ports:
      - "5000-5009:5000"  # Map ports 5000-5002 to allow multiple instances
    depends_on:
      nats:
        condition: service_healthy
      tor:
        condition: service_healthy
    environment:
      TOR_PROXY_HOST: tor
      TOR_PROXY_PORT: 9050
      RUN_MODE: server

  # Rust BTC Backend Workers
  checker-btc:
    build: ./checkers/btc
    image: hosh/btc-backend
    environment:
      RUN_MODE: worker
      MAX_CONCURRENT_CHECKS: 1
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NATS_URL: "nats://nats:4222"
      NATS_SUBJECT: "hosh.check.btc"
      TOR_PROXY_HOST: tor
      TOR_PROXY_PORT: 9050
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      tor:
        condition: service_healthy

  # Rust BTC Backend User Worker
  checker-btc-user:
    build: ./checkers/btc
    image: hosh/btc-backend
    environment:
      RUN_MODE: worker
      MAX_CONCURRENT_CHECKS: 1
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NATS_URL: "nats://nats:4222"
      NATS_SUBJECT: "hosh.check.btc.user"
      TOR_PROXY_HOST: tor
      TOR_PROXY_PORT: 9050
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      tor:
        condition: service_healthy

  dashboard:
    build: contrib/dashboard
    image: hosh/dashboard
    container_name: data-dashboard
    ports:
      - "8050:8050"
    profiles:
      - disabled
      - dev
    volumes:
      - ./contrib/dashboard:/app
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis

  discovery:
    build: ./discovery
    image: hosh/discovery
    container_name: discovery
    environment:
      - REDIS_HOST=redis
      - BTC_WORKER=http://btc-backend:5000
      - DISCOVERY_INTERVAL=3600
      - NATS_URL=nats://nats:4222
    depends_on:
      redis:
        condition: service_healthy
      btc-backend:
        condition: service_healthy

  publisher:
    build: 
      context: ./publisher
      dockerfile: Dockerfile
    image: hosh/publisher-rust
    container_name: publisher
    environment:
      - RUST_LOG=info
      - CHECK_INTERVAL=${CHECK_INTERVAL:-300}
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - NATS_PREFIX=${NATS_PREFIX:-hosh.}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      btc-backend:
        condition: service_healthy
      checker-zec:
        condition: service_started

  checker-zec:
    build: checkers/zec
    image: hosh/checker-zec
    container_name: checker-zec
    environment:
      NATS_HOST: nats
      NATS_PORT: 4222
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    image: redis:alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: always

  tor:
    image: osminogin/tor-simple
    container_name: tor
    healthcheck:
      test: |
        CMD-SHELL
        curl --fail --socks5-hostname localhost:9050 -s https://check.torproject.org/ | grep -qm1 Congratulations
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - TOR_NewCircuitPeriod=300
      - TOR_MaxCircuitDirtiness=600
    ports:
      - "9050:9050"
    restart: on-failure:5
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 120s

  web:
    build: web
    image: hosh/web
    container_name: web
    ports:
      - "8080:8080"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 5s
      timeout: 3s
      retries: 5

  architecture:
    image: terrastruct/d2:v0.1.2
    profiles:
      - disabled
      - dev
    environment:
      - D2_LAYOUT=dagre
    volumes:
      - ./docs/src:/home/debian/src
    ports:
      - "8000:8080"
    command: ["--watch", "/home/debian/src/architecture.d2"]


volumes:
  btc-data:
  redis-data:
