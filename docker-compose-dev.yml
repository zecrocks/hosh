services:

  hosh-dev:
    # build this before building any of the -dev services
    build:
      context: .
      dockerfile: dev.Dockerfile
    image: hosh/dev
    profiles:
      - dev


  web:
    build:
      context: ./web
      dockerfile: dev.Dockerfile
    image: hosh/web-dev
    ports:
      - "8080:8080"
    volumes:
      - ./web:/usr/src/web
      - ./web/target:/usr/src/web/target  # Persist build artifacts
      - cargo-cache:/usr/local/cargo/registry
    environment:
      - RUST_LOG=info

  discovery:
    build:
      context: ./discovery
      dockerfile: dev.Dockerfile
    image: hosh/discovery-dev
    volumes:
      - ./discovery:/usr/src/app
      - ./discovery/target:/usr/src/app/target  # Persist build artifacts
      - cargo-cache:/usr/local/cargo/registry
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - TRACING_LEVEL=info

  publisher:
    build:
      context: ./publisher
      dockerfile: dev.Dockerfile
    volumes:
      - ./publisher:/usr/src/app
      - cargo-cache:/usr/local/cargo/registry
    environment:
      - RUST_LOG=info

  checker-zec:
    build:
      context: ./checkers/zec
      dockerfile: dev.Dockerfile
    image: hosh/checker-zec-dev
    volumes:
      - ./checkers/zec:/usr/src/zec
      - ./checkers/zec/target:/usr/src/zec/target  # Persist build artifacts
      - cargo-cache:/usr/local/cargo/registry
    environment:
      RUST_LOG: info

  checker-zec-1:
    build:
      context: ./checkers/zec
      dockerfile: dev.Dockerfile
    image: hosh/checker-zec-dev
    volumes:
      - ./checkers/zec:/usr/src/zec
      - ./checkers/zec/target:/usr/src/zec/target  # Persist build artifacts
      - cargo-cache:/usr/local/cargo/registry
    environment:
      RUST_LOG: info

  checker-btc:
    build:
      context: ./checkers/btc
      dockerfile: dev.Dockerfile
    image: hosh/checker-btc-dev
    volumes:
      - ./checkers/btc:/usr/src/btc
      - ./checkers/btc/target:/usr/src/btc/target  # Persist build artifacts
      - cargo-cache:/usr/local/cargo/registry
    environment:
      RUST_LOG: info


  checker-btc-user:
    build:
      context: ./checkers/btc
      dockerfile: dev.Dockerfile
    image: hosh/checker-btc-dev
    volumes:
      - ./checkers/btc:/usr/src/btc
      - ./checkers/btc/target:/usr/src/btc/target  # Persist build artifacts
      - cargo-cache:/usr/local/cargo/registry
    environment:
      RUST_LOG: info

  checker-http:
    build:
      context: ./checkers/http
      dockerfile: dev.Dockerfile
    image: hosh/checker-http-dev
    volumes:
      - ./checkers/http:/usr/src/app
      - ./checkers/http/target:/usr/src/app/target  # Persist build artifacts
      - cargo-cache:/usr/local/cargo/registry
    environment:
      - RUST_LOG=info

  dashboard:
    build: contrib/dashboard
    image: hosh/dashboard
    container_name: data-dashboard
    ports:
      - "8050:8050"
    profiles:
      - dev
    volumes:
      - ./contrib/dashboard:/app
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CLICKHOUSE_HOST=chronicler
      - CLICKHOUSE_PORT=9000
      - CLICKHOUSE_DB=${CLICKHOUSE_DB}
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
      - NATS_HOST=nats
      - NATS_PORT=4222
      - NATS_PREFIX=hosh.
    depends_on:
      - chronicler
      - nats


  docs:
    image: peaceiris/mdbook:latest
    profiles:
      - dev
    ports:
      - "3000:3000"
      - "3001:3001"
    volumes:
      - .:/hosh
    command: ["serve", "--hostname", "0.0.0.0", "--port", "3000"]
    working_dir: /hosh/docs


  architecture:
    image: terrastruct/d2:v0.1.2
    profiles:
      - disabled
      - dev
    environment:
      - D2_LAYOUT=dagre
    volumes:
      - ./docs/src:/home/debian/src
    ports:
      - "8000:8080"
    command: ["--watch", "/home/debian/src/architecture.d2"]


  redis:
    image: redis:alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    # Uncomment for local development, or use "docker compose exec -ti redis redis-cli"
    # ports:
    #   - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: always
    profiles:
      - dev

  nostr-alert:
    build:
      context: ./contrib/nostr-alert
      dockerfile: dev.Dockerfile
    image: hosh/nostr-alert-dev
    volumes:
      - ./contrib/nostr-alert:/usr/src/nostr-alert
      - ./contrib/nostr-alert/target:/usr/src/nostr-alert/target  # Persist build artifacts
      - cargo-cache:/usr/local/cargo/registry
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - ADMIN_PUB_KEY=${ADMIN_PUB_KEY}
      - HOSH_PRIV_KEY=${HOSH_PRIV_KEY}
      - ZEC_HTML_URL=${ZEC_HTML_URL:-http://web:8080/zec}
      - BTC_HTML_URL=${BTC_HTML_URL:-http://web:8080/btc}
      - ZEC_API_URL=${ZEC_API_URL:-http://web:8080/api/v0/zec.json}
      - BTC_API_URL=${BTC_API_URL:-http://web:8080/api/v0/btc.json}
      - CHECK_INTERVAL_SECONDS=${CHECK_INTERVAL_SECONDS:-300}
      - MAX_CHECK_AGE_MINUTES=${MAX_CHECK_AGE_MINUTES:-30}
      - GENERATE_KEYS=${GENERATE_KEYS:-false}
    command: ["cargo", "watch", "-q", "-c", "-w", "src", "-x", "run"]
    profiles:
      - dev

volumes:
  cargo-cache:
  btc-data:
  redis-data:
